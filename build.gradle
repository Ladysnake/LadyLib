buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

allprojects {

    group = modGroup
    version = project.findProperty("${project.name}Version")

    apply plugin: "net.minecraftforge.gradle.forge"

    sourceCompatibility = targetCompatibility = '1.8'


    minecraft {
        version = project.forgeVersion
        runDir = "run"
        replace '${version}', project.version

        mappings = project.mcpVersion
        makeObfSourceJar = false // Disable Srg named sources jar
    }

    apply from: new File(rootProject.projectDir, 'dependencies.gradle')

    jar {
        archiveName = "${archivesBaseName}-${mcVersion}-${project.version}.jar"
        manifest {
            attributes ([
                    'Maven-Artifact': "${project.group}:${archivesBaseName}:${project.version}",
                    'Timestamp': System.currentTimeMillis()
            ])
        }
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include "mcmod.info"

            // replace version and mcversion
            expand "version": project.version, "mcversion": project.minecraft.version
        }

        // copy everything else, that's not the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude "mcmod.info"
        }

        rename '(.+_at.cfg)', 'META-INF/$1'
    }
}

apply plugin: 'maven'
apply plugin: 'signing'

jar {
    manifest {
        attributes([
                'FMLAT'         : 'ladylib_at.cfg'
        ])
    }
}

sourceJar {
    archiveName = "${archivesBaseName}-${mcVersion}-${project.version}-${classifier}.jar"
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    inputFile = jar.archivePath
    outputFile = jar.archivePath

    keyStore = project.properties.keyStore
    alias = project.properties.keyStoreAlias
    storePass = project.properties.keyStorePass
    keyPass = project.properties.keyStoreKeyPass
}

artifacts {
    archives(signJar.outputFile) {
        file signJar.outputFile
        type 'jar'
        builtBy signJar
    }
    archives sourceJar
}

// configure subprojects
apply from: 'projects.gradle'